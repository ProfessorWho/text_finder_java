/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examples;
import javax.swing.*;
import java.io.*;
import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.tree.*;
import javax.swing.tree.DefaultMutableTreeNode;
/**
 *
 * @author Pt
 */
public class LogSearch extends javax.swing.JFrame {

    /**
     * Creates new form LogSearch
     */
    private File root;
    private String fPattern; //паттерн поиска
    private String nPattern; //паттерн навигации
    private ArrayList<Integer> idxList;
    private int curPos;
    
    public LogSearch() {
        initComponents();
        tree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree1.setVisible(false);
        erDir.setVisible(false);
        erFind.setVisible(false);
        erType.setVisible(false);
    }
    
    DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
        DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(new FileNode(dir));
        /*if (curTop != null) {
            curTop.add(curDir);
        }*/

        List<File> files = new ArrayList<File>(Arrays.asList(dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                String name = pathname.getName().toLowerCase();
                return name.endsWith(typeText.getText())||(pathname.isDirectory());
            }
        })));
        for (File file : files) {
            if (file.isDirectory()) {
                addNodes(curDir, file);
            }
        }
        boolean enDir = true;
        fPattern = textToFind.getText();
        for (File file : files) {
            if (file.isFile()) {
                if(search(file, fPattern)){
                    if (curTop != null && enDir) {
                        curTop.add(curDir);
                        enDir = !enDir;
                    }
                    curDir.add(new DefaultMutableTreeNode(new FileNode(file), false));
                }
            }
        }
        return curDir;
    }
    private boolean search(File file, String str){
        try {
            //int count = 0;
            FileReader fileIn = new FileReader(file);
            BufferedReader reader = new BufferedReader(fileIn);
            String line;
            while((line = reader.readLine()) != null) {
                if((line.contains(str))) {
                    return true;
                }
            }
            //return false;
        }catch (IOException e){
            System.out.println(e);
        }
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();
        pathtxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        textToFind = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree1 = new javax.swing.JTree();
        typeText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fText = new javax.swing.JTextArea();
        DownBtn = new javax.swing.JButton();
        UpBtn = new javax.swing.JButton();
        AllBtn = new javax.swing.JButton();
        OpenBtn = new javax.swing.JButton();
        erDir = new javax.swing.JLabel();
        erFind = new javax.swing.JLabel();
        erType = new javax.swing.JLabel();

        chooser.setAcceptAllFileFilterUsed(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Поиск текста в файлах");
        setLocationByPlatform(true);
        setResizable(false);

        pathtxt.setEditable(false);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Найти");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tree1);

        typeText.setText("log");
        typeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Папка:");

        jLabel2.setText("Искать:");

        jLabel3.setText("В файлах с расширением:");

        fText.setEditable(false);
        fText.setColumns(20);
        fText.setLineWrap(true);
        fText.setRows(5);
        fText.setWrapStyleWord(true);
        fText.setEnabled(false);
        jScrollPane2.setViewportView(fText);

        DownBtn.setText("Вниз");
        DownBtn.setEnabled(false);
        DownBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownBtnActionPerformed(evt);
            }
        });

        UpBtn.setText("Вверх");
        UpBtn.setEnabled(false);
        UpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpBtnActionPerformed(evt);
            }
        });

        AllBtn.setText("Всё");
        AllBtn.setEnabled(false);
        AllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllBtnActionPerformed(evt);
            }
        });

        OpenBtn.setText("Открыть");
        OpenBtn.setEnabled(false);
        OpenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenBtnActionPerformed(evt);
            }
        });

        erDir.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        erDir.setForeground(new java.awt.Color(255, 51, 51));
        erDir.setText("Укажите папку поиска");
        erDir.setFocusable(false);

        erFind.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        erFind.setForeground(new java.awt.Color(255, 51, 51));
        erFind.setText("Укажите искомый текст");

        erType.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        erType.setForeground(new java.awt.Color(255, 51, 51));
        erType.setText("Укажите расширение файлов");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(erFind)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(textToFind)
                                    .addComponent(pathtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(erDir, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(typeText, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1))
                    .addComponent(erType))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OpenBtn)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UpBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DownBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AllBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pathtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jLabel1))
                        .addGap(1, 1, 1)
                        .addComponent(erDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textToFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jLabel2))
                        .addGap(3, 3, 3)
                        .addComponent(erFind)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(1, 1, 1)
                        .addComponent(erType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OpenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(UpBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(DownBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        chooser.setCurrentDirectory(new File("$"));
        chooser.setDialogTitle("Выберите директорию");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            pathtxt.setText(chooser.getSelectedFile().toString());
            root = chooser.getSelectedFile();
            //tree1.setModel(new FileSystemModel(new File(path.toString())));
            
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        boolean g1, g2, g3;    
        erDir.setVisible(g1 = pathtxt.getText().isEmpty());
        erType.setVisible(g2 = typeText.getText().isEmpty());
        erFind.setVisible(g3 = textToFind.getText().isEmpty());
        if(!g1&&!g2&&!g3)
        {
            DefaultTreeModel model = new DefaultTreeModel(addNodes(null, root));
            model.setAsksAllowsChildren(true);
            tree1.setModel(model);
            tree1.setVisible(true);
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void typeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeTextActionPerformed

    private void DownBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownBtnActionPerformed
        Highlighter hl = fText.getHighlighter();
        String pattern = nPattern;
        hl.removeAllHighlights();
        if(curPos >= idxList.size()-1)
            curPos = 0;
        else
            curPos += 1;
        int idx = idxList.get(curPos);
        try {
            hl.addHighlight(idx, idx + pattern.length(), new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.ORANGE));
            fText.setCaretPosition(idx);
        }catch (BadLocationException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_DownBtnActionPerformed

    private void UpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpBtnActionPerformed
        Highlighter hl = fText.getHighlighter();
        String pattern = nPattern;
        hl.removeAllHighlights();
        if(curPos <= 0)
            curPos = idxList.size() - 1;
        else
            curPos -= 1;
        int idx = idxList.get(curPos);
        try {
            hl.addHighlight(idx, idx + pattern.length(), new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.ORANGE));
            fText.setCaretPosition(idx);
        }catch (BadLocationException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_UpBtnActionPerformed

    private void AllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllBtnActionPerformed
        String pattern = nPattern;
        Highlighter hl = fText.getHighlighter();
        hl.removeAllHighlights();
        for(int idx : idxList){
            try { 
                if(idx >= 0)
                    hl.addHighlight(idx, idx + pattern.length(), new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.YELLOW));           
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_AllBtnActionPerformed

    private void OpenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenBtnActionPerformed
        Thread thr = new Thread(){
          @Override
          public void run(){
              Open(); 
          }
        };
        thr.start();
    }//GEN-LAST:event_OpenBtnActionPerformed

    private void Open(){
        try{
                    nPattern = fPattern;
                    String pattern = nPattern;
                    DefaultMutableTreeNode snode = (DefaultMutableTreeNode)tree1.getLastSelectedPathComponent();
                    FileNode nfile = (FileNode)snode.getUserObject();
                    File file = nfile.file;
                    FileReader reader = new FileReader( file );
                    BufferedReader br = new BufferedReader(reader);
                    fText.setText("");
                    idxList = new ArrayList<Integer>();    
                    fText.read( br, null );
                    if(!fText.isEnabled()){
                        fText.setEnabled(true);
                        AllBtn.setEnabled(true);
                        UpBtn.setEnabled(true);
                        DownBtn.setEnabled(true);
                    }
                    br.close();
                    String str = fText.getText();
                    Highlighter hl = fText.getHighlighter();
                    int idx = str.indexOf(pattern);
                    hl.addHighlight(idx, idx + pattern.length(), new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.ORANGE));
                    curPos = 0;
                    while(idx >= 0){
                        idxList.add(idx);
                        idx = str.indexOf(pattern, idx + pattern.length());   
                    }
                    fText.requestFocus();
                }
                catch(Exception e2) {}
    }
    private void tree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tree1ValueChanged
        try{
        DefaultMutableTreeNode snode = (DefaultMutableTreeNode)tree1.getLastSelectedPathComponent();
        FileNode nfile = (FileNode)snode.getUserObject();       
        if(nfile.file.isFile())
            OpenBtn.setEnabled(true);
        else
            OpenBtn.setEnabled(false);
        }catch(NullPointerException e){
            OpenBtn.setEnabled(false);
        }
    }//GEN-LAST:event_tree1ValueChanged

    public void listf(String directoryName, ArrayList<File> files) {
    File directory = new File(directoryName);

    // Get all files from a directory.
    File[] fList = directory.listFiles();
    if(fList != null)
        for (File file : fList) {      
            if (file.isFile()) {
                files.add(file);
            } else if (file.isDirectory()) {
                listf(file.getAbsolutePath(), files);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogSearch().setVisible(true);
            }
        });
    }
    public class FileNode {

        private File file;

        public FileNode(File file) {
            this.file = file;
        }

        @Override
        public String toString() {
            String name = file.getName();
            if (name.equals("")) {
                return file.getAbsolutePath();
            } else {
                return name;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AllBtn;
    private javax.swing.JButton DownBtn;
    private javax.swing.JButton OpenBtn;
    private javax.swing.JButton UpBtn;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JLabel erDir;
    private javax.swing.JLabel erFind;
    private javax.swing.JLabel erType;
    private javax.swing.JTextArea fText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField pathtxt;
    private javax.swing.JTextField textToFind;
    private javax.swing.JTree tree1;
    private javax.swing.JTextField typeText;
    // End of variables declaration//GEN-END:variables
}
